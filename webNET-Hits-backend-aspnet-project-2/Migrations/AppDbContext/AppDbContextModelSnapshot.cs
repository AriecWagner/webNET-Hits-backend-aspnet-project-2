// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using webNET_Hits_backend_aspnet_project_2.Data;

#nullable disable

namespace webNET_Hits_backend_aspnet_project_2.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("webNET_Hits_backend_aspnet_project_2.Models.DbModels.CommentModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("webNET_Hits_backend_aspnet_project_2.Models.DbModels.CommunityMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CommunityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("CommunityRole");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("CommunityMembers");
                });

            modelBuilder.Entity("webNET_Hits_backend_aspnet_project_2.Models.DbModels.CommunityModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Communities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("21db62c6-a964-45c1-17e0-08dbea521a96"),
                            CreateTime = new DateTime(2023, 11, 21, 12, 24, 15, 810, DateTimeKind.Utc),
                            Description = "Место, помещение, где собираются масоны для проведения своих собраний, чаще называемых работами",
                            IsClosed = true,
                            Name = "Масонская ложа"
                        },
                        new
                        {
                            Id = new Guid("c5639aab-3a25-4efc-17e1-08dbea521a96"),
                            CreateTime = new DateTime(2023, 11, 21, 12, 24, 15, 810, DateTimeKind.Utc),
                            Description = "Без длинных предисловий: мужчина умер",
                            IsClosed = false,
                            Name = "Следствие вели с Л. Каневским"
                        },
                        new
                        {
                            Id = new Guid("b9851a35-b836-47f8-17e2-08dbea521a96"),
                            CreateTime = new DateTime(2023, 11, 21, 12, 24, 15, 810, DateTimeKind.Utc),
                            Description = "Информационные технологии связаны с изучением методов и средств сбора, обработки и передачи данных с целью получения информации нового качества о состоянии объекта, процесса или явления",
                            IsClosed = false,
                            Name = "IT <3"
                        });
                });

            modelBuilder.Entity("webNET_Hits_backend_aspnet_project_2.Models.DbModels.LikeModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("webNET_Hits_backend_aspnet_project_2.Models.DbModels.PasswordModel", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("UserPasswords");
                });

            modelBuilder.Entity("webNET_Hits_backend_aspnet_project_2.Models.DbModels.PostData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CommunityId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<int>("ReadingTime")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("webNET_Hits_backend_aspnet_project_2.Models.DbModels.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7dd0e51a-606f-4dea-e6e3-08dbea521a91"),
                            CreateTime = new DateTime(2023, 11, 21, 12, 24, 15, 810, DateTimeKind.Utc),
                            Name = "история"
                        },
                        new
                        {
                            Id = new Guid("d774dd11-2600-46ab-e6e4-08dbea521a91"),
                            CreateTime = new DateTime(2023, 11, 21, 12, 24, 15, 839, DateTimeKind.Utc),
                            Name = "еда"
                        },
                        new
                        {
                            Id = new Guid("341aa6d9-cf7b-4a99-e6e5-08dbea521a91"),
                            CreateTime = new DateTime(2023, 11, 21, 12, 24, 15, 843, DateTimeKind.Utc),
                            Name = "18+"
                        },
                        new
                        {
                            Id = new Guid("553f5361-428a-4122-e6e6-08dbea521a91"),
                            CreateTime = new DateTime(2023, 11, 21, 12, 24, 15, 853, DateTimeKind.Utc),
                            Name = "приколы"
                        },
                        new
                        {
                            Id = new Guid("86acb301-05ff-4822-e6e7-08dbea521a91"),
                            CreateTime = new DateTime(2023, 11, 21, 12, 24, 15, 863, DateTimeKind.Utc),
                            Name = "it"
                        },
                        new
                        {
                            Id = new Guid("e587312f-4df7-4879-e6e8-08dbea521a91"),
                            CreateTime = new DateTime(2023, 11, 21, 12, 24, 15, 873, DateTimeKind.Utc),
                            Name = "интернет"
                        },
                        new
                        {
                            Id = new Guid("47aa0a33-2b86-4039-e6e9-08dbea521a91"),
                            CreateTime = new DateTime(2023, 11, 21, 12, 24, 15, 883, DateTimeKind.Utc),
                            Name = "теория_заговора"
                        },
                        new
                        {
                            Id = new Guid("e463050a-d659-433d-e6ea-08dbea521a91"),
                            CreateTime = new DateTime(2023, 11, 21, 12, 24, 15, 892, DateTimeKind.Utc),
                            Name = "соцсети"
                        },
                        new
                        {
                            Id = new Guid("0c64569f-5675-484b-e6eb-08dbea521a91"),
                            CreateTime = new DateTime(2023, 11, 21, 12, 24, 15, 802, DateTimeKind.Utc),
                            Name = "косплей"
                        },
                        new
                        {
                            Id = new Guid("fb1f2ce1-6943-420f-e6ec-08dbea521a91"),
                            CreateTime = new DateTime(2023, 11, 21, 12, 24, 15, 812, DateTimeKind.Utc),
                            Name = "преступление"
                        });
                });

            modelBuilder.Entity("webNET_Hits_backend_aspnet_project_2.Models.DbModels.TagPostJoin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("TagsPostsJoinTable");
                });

            modelBuilder.Entity("webNET_Hits_backend_aspnet_project_2.Models.DbModels.TokenModel", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsValid")
                        .HasColumnType("boolean");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("webNET_Hits_backend_aspnet_project_2.Models.DbModels.UserData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Gender");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
